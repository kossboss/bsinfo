#!/bin/bash
# usage: bsinfoP <volumename>
# example: bsinfoP /data
# disclaimer: for looks dont put a slash at the end of the volumename, e.g. use /data instead of /data/
# disclaimer: make sure to only use the absolute path of the volume
# disclaimer: use absolute path of volume and not the absolute path of any of its subvolumes (or else output paths look weird)
# btrfs snapshot space - sorted by Path
# output units: M as in MiB or Megabytes (binary - where 1 K = 1024 bytes)
# needed programs: btrfs qgroup, btrfs subvolume, grep, awk, sed, echo, if, and test with [
# works with Bash 4.2.37, Btrfs v3.14.2
# ---------- #
# more info:
# ---------- #
# The snapshot path information is grabbed from the output of "btrfs subvolume list -p --sort=path /data"
# The snapshot size information is grabbed from the output of "btrfs qgroup show /data"
# For this to work you might need to have btrfs quota globally enabled on your btrfs volume.
# To enable btrfs quotas just type:
# $ btrfs quota enable /data
# where /data is your volumename
# ------------ #
# to download: #
# ------------ #
# wget https://raw.githubusercontent.com/kossboss/bsinfo/master/bsinfoI
# wget https://raw.githubusercontent.com/kossboss/bsinfo/master/bsinfoP
# chmod +x bsinfoI
# chmod +x bsinfoP
########################
VOL1="$1"
if [ -z $VOL1 ]; then echo "usage: $0 <volumename>"; exit -1; fi;
(QOUT1=`btrfs qgroup show $VOL1 | tail -n +3` # tail part removes the top 2 lines which are just column headers
BOUT1=`btrfs subvolume list -p --sort=path $VOL1`
OLDIFS=$IFS
IFS=$'\n'
DEFAULT1="...n/a..."
########################
echo "id ref(MB) excl(MB) path" | awk '{printf "%-9s %-15s %-15s %-12s\n", $1, $2, $3, $4}' 
echo "---- ------- -------- -----" | awk '{printf "%-9s %-15s %-15s %-12s\n", $1, $2, $3, $4}' 
########################
for i in $BOUT1; do
BLINE1=$i
BSID2=`echo $BLINE1 | awk '{print $2}'`
BSNAP2=`echo $BLINE1 | sed -n 's/^.*top level [0-9]* path \(.*\)$/\1/p'`
if [ -z $BSNAP2 ]; then
BSNAP2=$DEFAULT1
else
BSNAP2=$VOL1/$BSNAP2
fi
QLINE3=`echo "$QOUT1" | grep "/$BSID2 "`
QID3=`echo $QLINE3 | awk '{print $1}'`
QREF3=`echo $QLINE3 | awk '{print $2}'`
QEXCL3=`echo $QLINE3 | awk '{print $3}'`
echo $QID3 $QREF3 $QEXCL3 $BSNAP2 | awk '{printf "%-9s %-15.2f %-15.2f %-12s\n", $1, $2/1024/1024, $3/1024/1024, $4}' 
done
########################
IFS=$OLDIFS)
